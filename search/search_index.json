{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Mission Statement \u00b6 Learn and practice plotting in q Topics on electronic trading in equities Promote collaboration","title":"Home"},{"location":"#mission-statement","text":"Learn and practice plotting in q Topics on electronic trading in equities Promote collaboration","title":"Mission Statement"},{"location":"examples/ex001/","text":"Volume Distribution Around Auctions \u00b6 In this example, we are going to create a bar chart to show and constrast the equities volume distribution around open and close auctions before, on and after the presidential election days in the United States in 2016 and 2020. The final chart looks like below: Data \u00b6 The table .ex001.data has the following schema: c | t f a ------| ----- date | d time | u volpct| f The first 3 rows from the table look like this: date time volpct ---------------------------- 2016.11.07 09:29 0.0116136 2016.11.07 09:30 0.005534212 2016.11.07 09:31 0.005412753 Step 1 \u00b6 Let's create a bar chart. Note that date has a date type and time is of type minute which is continuous type. // .ex001.f01 t:select from .ex001.data where date=2020.11.03; .qp.go[600;400;] .qp.bar[t;`time;`volpct;::] The above vanilla code creates a basic bar chart using data from November 3, 2020. The chart is as follows: One immediate problem with the chart above is that the bars are clustered at the two sides of the chart because the dataset only contains the data around open auction at 09:30 and close auction at 16:00. This leaves a huge empty space between the two clusters and make the chart really hard to read. Step 2 \u00b6 // .ex001.f02 One way to get rid of the empty space is to convert the time column from type minute to a categorical type like string or symbol . Let's modify the code slightly by converting the time into a symbol type: t:select from .ex001.data where date=2020.11.03; t:update `$string time from t; .qp.go[600;400;] .qp.bar[t;`time;`volpct;::] With this change in place, the bar chart looks much better. Step 3 \u00b6 By default, the column names are used as the axis labels. In our example, meaning of the y axis label volpct is not very obvious. In this step, I will show how to customize the axis labels. We use .qp.s.labels to customize the appreance of labels. Note that we use .qp.bar[t;`time;`volpct;] as a function projection. // .ex001.f03 t:select from .ex001.data where date=2020.11.03; t:update `$string time from t; .qp.go[600;400;] .qp.bar[t;`time;`volpct;] .qp.s.labels[`x`y!(`Time;`$\"Share Volume (%)\")] Now the bar chart looks like this: Step 4 \u00b6 The values on the y axis is actually percentage, i.e. 0.02 means 2%. It looks nicer if the tick values on the y axis are rendered as percentage by adding a percent sign in string format. The function .qp.s.scale will do the trick. // .ex001.f04 t:select from .ex001.data where date=2020.11.03; t:update `$string time from t; yfmt:{`$string[floor 0.5+100*x],\"%\"}; .qp.go[600;400;] .qp.bar[t;`time;`volpct;] .qp.s.labels[`x`y!(`Time;`$\"Share Volume (%)\")] ,.qp.s.scale[`y;.gg.scale.format[yfmt;] .gg.scale.linear] A function yfmt is defined to format a float number as percentage. Step 5 \u00b6 To make the volume bars more distinguishable between volume around open auction and volume around close auction, we can add a veritical divider to clearly separate the two clusters. // .ex001.f05 t:select from .ex001.data where date=2020.11.03; t:update `$string time from t; yfmt:{`$string[floor 0.5+100*x],\"%\"}; .qp.go[600;400;] .qp.stack ( .qp.bar[t;`time;`volpct;] .qp.s.labels[`x`y!(`Time;`$\"Share Volume (%)\")] ,.qp.s.scale[`y;.gg.scale.format[yfmt;] .gg.scale.linear]; .qp.vline[12:00;::] ) We add a vertical line and stack the bar and line on top of each other to produce the chart like below. As you can see that I use 12:00 as the x-axis value in this example. Actually any value between 09:34 and 15:55 surfices. Step 6 \u00b6 We have two problems with the tick labels on the x-axis: It is quite weird that a tick label is shown for the divider. It is much more informative if open auction is labelled as Open and close auction is labelled as Close , instead of 09:29 and 16:00 , respectively. Let's fix that. // .ex001.f06 t:select from .ex001.data where date=2020.11.03; t:update `$string time from t; xfmt:{$[-17h=type x;`;x=`$\"09:29\";`Open;x=`$\"16:00\";`Close;x]}; yfmt:{`$string[floor 0.5+100*x],\"%\"}; .qp.go[600;400;] .qp.stack ( .qp.bar[t;`time;`volpct;] .qp.s.labels[`x`y!(`Time;`$\"Share Volume (%)\")] ,.qp.s.scale[`x;.gg.scale.format[xfmt;.gg.scale.categorical[]]] ,.qp.s.scale[`y;.gg.scale.format[yfmt;.gg.scale.linear]]; .qp.vline[12:00;::] ) After a x-axis tick formatter is added, the bar chart looks much better. Step 7 \u00b6 A sharp-eyed reader may notice that there is a trailing comma in y-axis label and the x-axis label changes from \"Time\" to \"Time, x\" after the bar and vertical line are stacked on top of each other. This does not look good. Let's see how that can be fixed. // .ex001.f07 t:select from .ex001.data where date=2020.11.03; t:update `$string time from t; xfmt:{$[-17h=type x;`;x=`$\"09:29\";`Open;x=`$\"16:00\";`Close;x]}; yfmt:{`$string[floor 0.5+100*x],\"%\"}; .qp.go[600;400;] .qp.stack ( .qp.bar[t;`time;`volpct;] .qp.s.labels[`x`y!(`Time;`$\"Share Volume (%)\")] ,.qp.s.scale[`x;.gg.scale.format[xfmt;.gg.scale.categorical[]]] ,.qp.s.scale[`y;.gg.scale.format[yfmt;.gg.scale.linear]]; .qp.vline[12:00;] .qp.s.labels[`x`y!(`Time;`$\"Share Volume (%)\")] ) Step 8 \u00b6 So far, we have finished a nice-looking bar chart using data from a single day. How about plotting data from multiple days on the same chart? One way it is to dodge the overlapping bars side-to-side. Let's try putting the data for the three days around 2020 presidential election together in one single bar chart. // .ex001.f08 t:select from .ex001.data where 2020=`year$date; t:update `$string time from t; xfmt:{$[-17h=type x;`;x=`$\"09:29\";`Open;x=`$\"16:00\";`Close;x]}; yfmt:{`$string[floor 0.5+100*x],\"%\"}; .qp.go[600;400;] .qp.stack ( .qp.bar[t;`time;`volpct;] .qp.s.geom[``position!(::;`dodge)] ,.qp.s.aes[`fill`group;`date`date] ,.qp.s.labels[`x`y!(`Time;`$\"Share Volume (%)\")] ,.qp.s.scale[`x;.gg.scale.format[xfmt;.gg.scale.categorical[]]] ,.qp.s.scale[`y;.gg.scale.format[yfmt;.gg.scale.linear]]; .qp.vline[12:00;] .qp.s.labels[`x`y!(`Time;`$\"Share Volume (%)\")] ) The chart below has three days of data, but there are a few problems with it: The label for the legend is only partially shown The color of the legend is a gradient from a color spectrum. It is not easy to distinguish them. Step 9 \u00b6 Let's fix the two issues from the previous step by converting date into a categorical type. Note that .qdate.print is used to format a date. For additional details on the data parsing functions, see Date Parsing . // .ex001.f09 t:select from .ex001.data where 2020=`year$date; t:update .qdate.print[\"%b %e\";] each date,`$string time from t; xfmt:{$[-17h=type x;`;x=`$\"09:29\";`Open;x=`$\"16:00\";`Close;x]}; yfmt:{`$string[floor 0.5+100*x],\"%\"}; .qp.go[600;400;] .qp.stack ( .qp.bar[t;`time;`volpct;] .qp.s.geom[``position!(::;`dodge)] ,.qp.s.aes[`fill`group;`date`date] ,.qp.s.labels[`x`y!(`Time;`$\"Share Volume (%)\")] ,.qp.s.scale[`x;.gg.scale.format[xfmt;.gg.scale.categorical[]]] ,.qp.s.scale[`y;.gg.scale.format[yfmt;.gg.scale.linear]]; .qp.vline[12:00;] .qp.s.labels[`x`y!(`Time;`$\"Share Volume (%)\")] ) With the changes above, the color looks nicer and the legend label is clear and clean. Step 10 \u00b6 In this step, I will make two more updates to the bar chart: Remove the date in the legend title Add a chart title // .ex001.f10 t:select from .ex001.data where 2020=`year$date; t:update .qdate.print[\"%b %e\";] each date,`$string time from t; xfmt:{$[-17h=type x;`;x=`$\"09:29\";`Open;x=`$\"16:00\";`Close;x]}; yfmt:{`$string[floor 0.5+100*x],\"%\"}; ll:reverse exec distinct date from t; / legend label .qp.go[600;400;] .qp.title[\"Market Volume Distribution around Auctions: 2020\"] .qp.theme[`legend_header_background_fill`legend_padding_top!(`white;-20)] .qp.stack ( .qp.bar[t;`time;`volpct;] .qp.s.geom[``position!(::;`dodge)] ,.qp.s.aes[`fill`group;`date`date] ,.qp.s.theme[``legend_use!(::;0b)] ,.qp.s.labels[`x`y!(`Time;`$\"Share Volume (%)\")] ,.qp.s.scale[`x;.gg.scale.format[xfmt;.gg.scale.categorical[]]] ,.qp.s.scale[`y;.gg.scale.format[yfmt;.gg.scale.linear]]; .qp.vline[12:00;] .qp.s.labels[`x`y!(`Time;`$\"Share Volume (%)\")] ,.qp.s.legend[\"\";ll!count[ll]#.gg.colour.cat10] ) Step 11 \u00b6 // .ex001.f11 .qp.go[600;600;] .qp.vertical( .ex001.f10 2016; .ex001.f10 2020 ) Variations \u00b6 Legend title \u00b6 Instead of adding the year to the plot title, we can also use year as the legend title. t:select from .ex001.data where 2020=`year$date; t:update .qdate.print[\"%b %e\";] each date,`$string time from t; xfmt:{$[-17h=type x;`;x=`$\"09:29\";`Open;x=`$\"16:00\";`Close;x]}; yfmt:{`$string[floor 0.5+100*x],\"%\"}; ll:reverse exec distinct date from t; / legend label .qp.go[600;400;] .qp.title[\"Market Volume Distribution around Auctions\"] .qp.stack ( .qp.bar[t;`time;`volpct;] .qp.s.geom[``position!(::;`dodge)] ,.qp.s.aes[`fill`group;`date`date] ,.qp.s.theme[``legend_use!(::;0b)] ,.qp.s.labels[`x`y!(`Time;`$\"Share Volume (%)\")] ,.qp.s.scale[`x;.gg.scale.format[xfmt;.gg.scale.categorical[]]] ,.qp.s.scale[`y;.gg.scale.format[yfmt;.gg.scale.linear]]; .qp.vline[12:00;] .qp.s.labels[`x`y!(`Time;`$\"Share Volume (%)\")] ,.qp.s.legend[\"2020\";ll!count[ll]#.gg.colour.cat10] ) And the chart look like this: Color of the divider \u00b6 Instead of using the default grey color for the vertical divider, we can customize the color. t:select from .ex001.data where 2020=`year$date; t:update .qdate.print[\"%b %e\";] each date,`$string time from t; xfmt:{$[-17h=type x;`;x=`$\"09:29\";`Open;x=`$\"16:00\";`Close;x]}; yfmt:{`$string[floor 0.5+100*x],\"%\"}; ll:reverse exec distinct date from t; / legend label .qp.go[600;400;] .qp.title[\"Market Volume Distribution around Auctions: 2020\"] .qp.theme[`legend_header_background_fill`legend_padding_top!(`white;-20)] .qp.stack ( .qp.bar[t;`time;`volpct;] .qp.s.geom[``position!(::;`dodge)] ,.qp.s.aes[`fill`group;`date`date] ,.qp.s.theme[``legend_use!(::;0b)] ,.qp.s.labels[`x`y!(`Time;`$\"Share Volume (%)\")] ,.qp.s.scale[`x;.gg.scale.format[xfmt;.gg.scale.categorical[]]] ,.qp.s.scale[`y;.gg.scale.format[yfmt;.gg.scale.linear]]; .qp.vline[12:00;] .qp.s.geom[``fill!(::;`blue)] ,.qp.s.labels[`x`y!(`Time;`$\"Share Volume (%)\")] ,.qp.s.legend[\"\";ll!count[ll]#.gg.colour.cat10] ) The chart below indicates the color of the divider is changed to be blue. Same y-axis \u00b6 To make it easier to compare the change of volume distribution year over year, the same y-axis should be used. You can use .qs.s.share to force the same axis is used across different charts. .ex001.f12:{[yyyy] t:select from .ex001.data where yyyy=`year$date; t:update .qdate.print[\"%b %e\";] each date,`$string time from t; xfmt:{$[-17h=type x;`;x=`$\"09:29\";`Open;x=`$\"16:00\";`Close;x]}; yfmt:{`$string[floor 0.5+100*x],\"%\"}; ll:reverse exec distinct date from t; / legend label .qp.title[\"Market Volume Distribution around Auctions: \",string yyyy] .qp.theme[`legend_header_background_fill`legend_padding_top!(`white;-20)] .qp.stack ( .qp.bar[t;`time;`volpct;] .qp.s.geom[``position!(::;`dodge)] ,.qp.s.aes[`fill`group;`date`date] ,.qp.s.share[`auctionVol;`y] ,.qp.s.theme[``legend_use!(::;0b)] ,.qp.s.labels[`x`y!(`Time;`$\"Share Volume (%)\")] ,.qp.s.scale[`x;.gg.scale.format[xfmt;.gg.scale.categorical[]]] ,.qp.s.scale[`y;.gg.scale.format[yfmt;.gg.scale.linear]]; .qp.vline[12:00;] .qp.s.geom[``fill!(::;`blue)] ,.qp.s.labels[`x`y!(`Time;`$\"Share Volume (%)\")] ,.qp.s.legend[\"\";ll!count[ll]#.gg.colour.cat10] ) }; .qp.go[600;600;] .qp.vertical( .ex001.f12 2016; .ex001.f12 2020 ) After forcing the same y-axis, the two sub-plots have the same maximum tick label of 6%.","title":"Example 1"},{"location":"examples/ex001/#volume-distribution-around-auctions","text":"In this example, we are going to create a bar chart to show and constrast the equities volume distribution around open and close auctions before, on and after the presidential election days in the United States in 2016 and 2020. The final chart looks like below:","title":"Volume Distribution Around Auctions"},{"location":"examples/ex001/#data","text":"The table .ex001.data has the following schema: c | t f a ------| ----- date | d time | u volpct| f The first 3 rows from the table look like this: date time volpct ---------------------------- 2016.11.07 09:29 0.0116136 2016.11.07 09:30 0.005534212 2016.11.07 09:31 0.005412753","title":"Data"},{"location":"examples/ex001/#step-1","text":"Let's create a bar chart. Note that date has a date type and time is of type minute which is continuous type. // .ex001.f01 t:select from .ex001.data where date=2020.11.03; .qp.go[600;400;] .qp.bar[t;`time;`volpct;::] The above vanilla code creates a basic bar chart using data from November 3, 2020. The chart is as follows: One immediate problem with the chart above is that the bars are clustered at the two sides of the chart because the dataset only contains the data around open auction at 09:30 and close auction at 16:00. This leaves a huge empty space between the two clusters and make the chart really hard to read.","title":"Step 1"},{"location":"examples/ex001/#step-2","text":"// .ex001.f02 One way to get rid of the empty space is to convert the time column from type minute to a categorical type like string or symbol . Let's modify the code slightly by converting the time into a symbol type: t:select from .ex001.data where date=2020.11.03; t:update `$string time from t; .qp.go[600;400;] .qp.bar[t;`time;`volpct;::] With this change in place, the bar chart looks much better.","title":"Step 2"},{"location":"examples/ex001/#step-3","text":"By default, the column names are used as the axis labels. In our example, meaning of the y axis label volpct is not very obvious. In this step, I will show how to customize the axis labels. We use .qp.s.labels to customize the appreance of labels. Note that we use .qp.bar[t;`time;`volpct;] as a function projection. // .ex001.f03 t:select from .ex001.data where date=2020.11.03; t:update `$string time from t; .qp.go[600;400;] .qp.bar[t;`time;`volpct;] .qp.s.labels[`x`y!(`Time;`$\"Share Volume (%)\")] Now the bar chart looks like this:","title":"Step 3"},{"location":"examples/ex001/#step-4","text":"The values on the y axis is actually percentage, i.e. 0.02 means 2%. It looks nicer if the tick values on the y axis are rendered as percentage by adding a percent sign in string format. The function .qp.s.scale will do the trick. // .ex001.f04 t:select from .ex001.data where date=2020.11.03; t:update `$string time from t; yfmt:{`$string[floor 0.5+100*x],\"%\"}; .qp.go[600;400;] .qp.bar[t;`time;`volpct;] .qp.s.labels[`x`y!(`Time;`$\"Share Volume (%)\")] ,.qp.s.scale[`y;.gg.scale.format[yfmt;] .gg.scale.linear] A function yfmt is defined to format a float number as percentage.","title":"Step 4"},{"location":"examples/ex001/#step-5","text":"To make the volume bars more distinguishable between volume around open auction and volume around close auction, we can add a veritical divider to clearly separate the two clusters. // .ex001.f05 t:select from .ex001.data where date=2020.11.03; t:update `$string time from t; yfmt:{`$string[floor 0.5+100*x],\"%\"}; .qp.go[600;400;] .qp.stack ( .qp.bar[t;`time;`volpct;] .qp.s.labels[`x`y!(`Time;`$\"Share Volume (%)\")] ,.qp.s.scale[`y;.gg.scale.format[yfmt;] .gg.scale.linear]; .qp.vline[12:00;::] ) We add a vertical line and stack the bar and line on top of each other to produce the chart like below. As you can see that I use 12:00 as the x-axis value in this example. Actually any value between 09:34 and 15:55 surfices.","title":"Step 5"},{"location":"examples/ex001/#step-6","text":"We have two problems with the tick labels on the x-axis: It is quite weird that a tick label is shown for the divider. It is much more informative if open auction is labelled as Open and close auction is labelled as Close , instead of 09:29 and 16:00 , respectively. Let's fix that. // .ex001.f06 t:select from .ex001.data where date=2020.11.03; t:update `$string time from t; xfmt:{$[-17h=type x;`;x=`$\"09:29\";`Open;x=`$\"16:00\";`Close;x]}; yfmt:{`$string[floor 0.5+100*x],\"%\"}; .qp.go[600;400;] .qp.stack ( .qp.bar[t;`time;`volpct;] .qp.s.labels[`x`y!(`Time;`$\"Share Volume (%)\")] ,.qp.s.scale[`x;.gg.scale.format[xfmt;.gg.scale.categorical[]]] ,.qp.s.scale[`y;.gg.scale.format[yfmt;.gg.scale.linear]]; .qp.vline[12:00;::] ) After a x-axis tick formatter is added, the bar chart looks much better.","title":"Step 6"},{"location":"examples/ex001/#step-7","text":"A sharp-eyed reader may notice that there is a trailing comma in y-axis label and the x-axis label changes from \"Time\" to \"Time, x\" after the bar and vertical line are stacked on top of each other. This does not look good. Let's see how that can be fixed. // .ex001.f07 t:select from .ex001.data where date=2020.11.03; t:update `$string time from t; xfmt:{$[-17h=type x;`;x=`$\"09:29\";`Open;x=`$\"16:00\";`Close;x]}; yfmt:{`$string[floor 0.5+100*x],\"%\"}; .qp.go[600;400;] .qp.stack ( .qp.bar[t;`time;`volpct;] .qp.s.labels[`x`y!(`Time;`$\"Share Volume (%)\")] ,.qp.s.scale[`x;.gg.scale.format[xfmt;.gg.scale.categorical[]]] ,.qp.s.scale[`y;.gg.scale.format[yfmt;.gg.scale.linear]]; .qp.vline[12:00;] .qp.s.labels[`x`y!(`Time;`$\"Share Volume (%)\")] )","title":"Step 7"},{"location":"examples/ex001/#step-8","text":"So far, we have finished a nice-looking bar chart using data from a single day. How about plotting data from multiple days on the same chart? One way it is to dodge the overlapping bars side-to-side. Let's try putting the data for the three days around 2020 presidential election together in one single bar chart. // .ex001.f08 t:select from .ex001.data where 2020=`year$date; t:update `$string time from t; xfmt:{$[-17h=type x;`;x=`$\"09:29\";`Open;x=`$\"16:00\";`Close;x]}; yfmt:{`$string[floor 0.5+100*x],\"%\"}; .qp.go[600;400;] .qp.stack ( .qp.bar[t;`time;`volpct;] .qp.s.geom[``position!(::;`dodge)] ,.qp.s.aes[`fill`group;`date`date] ,.qp.s.labels[`x`y!(`Time;`$\"Share Volume (%)\")] ,.qp.s.scale[`x;.gg.scale.format[xfmt;.gg.scale.categorical[]]] ,.qp.s.scale[`y;.gg.scale.format[yfmt;.gg.scale.linear]]; .qp.vline[12:00;] .qp.s.labels[`x`y!(`Time;`$\"Share Volume (%)\")] ) The chart below has three days of data, but there are a few problems with it: The label for the legend is only partially shown The color of the legend is a gradient from a color spectrum. It is not easy to distinguish them.","title":"Step 8"},{"location":"examples/ex001/#step-9","text":"Let's fix the two issues from the previous step by converting date into a categorical type. Note that .qdate.print is used to format a date. For additional details on the data parsing functions, see Date Parsing . // .ex001.f09 t:select from .ex001.data where 2020=`year$date; t:update .qdate.print[\"%b %e\";] each date,`$string time from t; xfmt:{$[-17h=type x;`;x=`$\"09:29\";`Open;x=`$\"16:00\";`Close;x]}; yfmt:{`$string[floor 0.5+100*x],\"%\"}; .qp.go[600;400;] .qp.stack ( .qp.bar[t;`time;`volpct;] .qp.s.geom[``position!(::;`dodge)] ,.qp.s.aes[`fill`group;`date`date] ,.qp.s.labels[`x`y!(`Time;`$\"Share Volume (%)\")] ,.qp.s.scale[`x;.gg.scale.format[xfmt;.gg.scale.categorical[]]] ,.qp.s.scale[`y;.gg.scale.format[yfmt;.gg.scale.linear]]; .qp.vline[12:00;] .qp.s.labels[`x`y!(`Time;`$\"Share Volume (%)\")] ) With the changes above, the color looks nicer and the legend label is clear and clean.","title":"Step 9"},{"location":"examples/ex001/#step-10","text":"In this step, I will make two more updates to the bar chart: Remove the date in the legend title Add a chart title // .ex001.f10 t:select from .ex001.data where 2020=`year$date; t:update .qdate.print[\"%b %e\";] each date,`$string time from t; xfmt:{$[-17h=type x;`;x=`$\"09:29\";`Open;x=`$\"16:00\";`Close;x]}; yfmt:{`$string[floor 0.5+100*x],\"%\"}; ll:reverse exec distinct date from t; / legend label .qp.go[600;400;] .qp.title[\"Market Volume Distribution around Auctions: 2020\"] .qp.theme[`legend_header_background_fill`legend_padding_top!(`white;-20)] .qp.stack ( .qp.bar[t;`time;`volpct;] .qp.s.geom[``position!(::;`dodge)] ,.qp.s.aes[`fill`group;`date`date] ,.qp.s.theme[``legend_use!(::;0b)] ,.qp.s.labels[`x`y!(`Time;`$\"Share Volume (%)\")] ,.qp.s.scale[`x;.gg.scale.format[xfmt;.gg.scale.categorical[]]] ,.qp.s.scale[`y;.gg.scale.format[yfmt;.gg.scale.linear]]; .qp.vline[12:00;] .qp.s.labels[`x`y!(`Time;`$\"Share Volume (%)\")] ,.qp.s.legend[\"\";ll!count[ll]#.gg.colour.cat10] )","title":"Step 10"},{"location":"examples/ex001/#step-11","text":"// .ex001.f11 .qp.go[600;600;] .qp.vertical( .ex001.f10 2016; .ex001.f10 2020 )","title":"Step 11"},{"location":"examples/ex001/#variations","text":"","title":"Variations"},{"location":"examples/ex001/#legend-title","text":"Instead of adding the year to the plot title, we can also use year as the legend title. t:select from .ex001.data where 2020=`year$date; t:update .qdate.print[\"%b %e\";] each date,`$string time from t; xfmt:{$[-17h=type x;`;x=`$\"09:29\";`Open;x=`$\"16:00\";`Close;x]}; yfmt:{`$string[floor 0.5+100*x],\"%\"}; ll:reverse exec distinct date from t; / legend label .qp.go[600;400;] .qp.title[\"Market Volume Distribution around Auctions\"] .qp.stack ( .qp.bar[t;`time;`volpct;] .qp.s.geom[``position!(::;`dodge)] ,.qp.s.aes[`fill`group;`date`date] ,.qp.s.theme[``legend_use!(::;0b)] ,.qp.s.labels[`x`y!(`Time;`$\"Share Volume (%)\")] ,.qp.s.scale[`x;.gg.scale.format[xfmt;.gg.scale.categorical[]]] ,.qp.s.scale[`y;.gg.scale.format[yfmt;.gg.scale.linear]]; .qp.vline[12:00;] .qp.s.labels[`x`y!(`Time;`$\"Share Volume (%)\")] ,.qp.s.legend[\"2020\";ll!count[ll]#.gg.colour.cat10] ) And the chart look like this:","title":"Legend title"},{"location":"examples/ex001/#color-of-the-divider","text":"Instead of using the default grey color for the vertical divider, we can customize the color. t:select from .ex001.data where 2020=`year$date; t:update .qdate.print[\"%b %e\";] each date,`$string time from t; xfmt:{$[-17h=type x;`;x=`$\"09:29\";`Open;x=`$\"16:00\";`Close;x]}; yfmt:{`$string[floor 0.5+100*x],\"%\"}; ll:reverse exec distinct date from t; / legend label .qp.go[600;400;] .qp.title[\"Market Volume Distribution around Auctions: 2020\"] .qp.theme[`legend_header_background_fill`legend_padding_top!(`white;-20)] .qp.stack ( .qp.bar[t;`time;`volpct;] .qp.s.geom[``position!(::;`dodge)] ,.qp.s.aes[`fill`group;`date`date] ,.qp.s.theme[``legend_use!(::;0b)] ,.qp.s.labels[`x`y!(`Time;`$\"Share Volume (%)\")] ,.qp.s.scale[`x;.gg.scale.format[xfmt;.gg.scale.categorical[]]] ,.qp.s.scale[`y;.gg.scale.format[yfmt;.gg.scale.linear]]; .qp.vline[12:00;] .qp.s.geom[``fill!(::;`blue)] ,.qp.s.labels[`x`y!(`Time;`$\"Share Volume (%)\")] ,.qp.s.legend[\"\";ll!count[ll]#.gg.colour.cat10] ) The chart below indicates the color of the divider is changed to be blue.","title":"Color of the divider"},{"location":"examples/ex001/#same-y-axis","text":"To make it easier to compare the change of volume distribution year over year, the same y-axis should be used. You can use .qs.s.share to force the same axis is used across different charts. .ex001.f12:{[yyyy] t:select from .ex001.data where yyyy=`year$date; t:update .qdate.print[\"%b %e\";] each date,`$string time from t; xfmt:{$[-17h=type x;`;x=`$\"09:29\";`Open;x=`$\"16:00\";`Close;x]}; yfmt:{`$string[floor 0.5+100*x],\"%\"}; ll:reverse exec distinct date from t; / legend label .qp.title[\"Market Volume Distribution around Auctions: \",string yyyy] .qp.theme[`legend_header_background_fill`legend_padding_top!(`white;-20)] .qp.stack ( .qp.bar[t;`time;`volpct;] .qp.s.geom[``position!(::;`dodge)] ,.qp.s.aes[`fill`group;`date`date] ,.qp.s.share[`auctionVol;`y] ,.qp.s.theme[``legend_use!(::;0b)] ,.qp.s.labels[`x`y!(`Time;`$\"Share Volume (%)\")] ,.qp.s.scale[`x;.gg.scale.format[xfmt;.gg.scale.categorical[]]] ,.qp.s.scale[`y;.gg.scale.format[yfmt;.gg.scale.linear]]; .qp.vline[12:00;] .qp.s.geom[``fill!(::;`blue)] ,.qp.s.labels[`x`y!(`Time;`$\"Share Volume (%)\")] ,.qp.s.legend[\"\";ll!count[ll]#.gg.colour.cat10] ) }; .qp.go[600;600;] .qp.vertical( .ex001.f12 2016; .ex001.f12 2020 ) After forcing the same y-axis, the two sub-plots have the same maximum tick label of 6%.","title":"Same y-axis"},{"location":"examples/area/","text":"Area Chart \u00b6 Basic Area Chart","title":"Overview"},{"location":"examples/area/#area-chart","text":"Basic Area Chart","title":"Area Chart"},{"location":"examples/area/basic/","text":"Basic Area Chart \u00b6 In this example, we are going to create a basic area chart to show the daily sales revenue of a coffee shop over a week. The final chart looks like below: Overview of Data \u00b6 The table .area.salesRevenue has the following schema: c | t f a -------| ----- dow | s revenue| j The first 3 rows from the table are as shown below. dow revenue ----------- Mon 820 Tue 932 Wed 901 The first column dow is day of week and the second column revenue is daily sales revenue in dollars. Step 1: First Attempt \u00b6 The function .qp.area creates an area chart. The following code snippet creates the area chart of sales revenue against the day of week without any customization. .qp.go[600;400;] .qp.area[.area.salesRevenue;`dow;`revenue;::] There are a few improvements on this area chart we can make: Customize the y -axis label and tick values Remove the x -axis label since it is not necessary Sort the data points from Monday to Sunday Step 2: Customize Axis Labels \u00b6 The last line with .qp.s.labels is added in the code snippet below to customize the axis labels. Note that a null symbol is used for the x -axis to suppress the label. .qp.go[600;400;] .qp.area[.area.salesRevenue;`dow;`revenue;] .qp.s.labels[`x`y!(`;`$\"Daily Sales Revenue\")] Step 3: Format Tick Values \u00b6 In this step, we add a function to format the displayed tick values on the y -axis, i.e. comma is used as the thousands separator and a dollar sign ($) is prepended. fmt:{\"$\",reverse \",\" sv 0N 3#reverse string x}; .qp.go[600;400;] .qp.area[.area.salesRevenue;`dow;`revenue;] .qp.s.labels[`x`y!(`;`$\"Daily Sales Revenue\")] ,.qp.s.scale[`y;.gg.scale.format[fmt] .gg.scale.linear] Step 4: Reorder x -Axis Values \u00b6 The function .gg.scale.categorical takes a function which returns the new order of the categorical values. fmt:{\"$\",reverse \",\" sv 0N 3#reverse string x}; .qp.go[600;400;] .qp.area[.area.salesRevenue;`dow;`revenue;] .qp.s.labels[`x`y!(`;`$\"Daily Sales Revenue\")] ,.qp.s.scale[`y;.gg.scale.format[fmt] .gg.scale.linear] ,.qp.s.scale[`x;.gg.scale.categorical[{`Mon`Tue`Wed`Thu`Fri`Sat`Sun}]] After adding the last line in code above, the data is displayed properly from Monday to Sunday. Step 5: Start the Scale at Zero \u00b6 The function .gg.scale.limits is used to control the limits (minimum and maximum) for a scale. If either limit provided is null, the minimum or maximum values will be used as in usual. fmt:{\"$\",reverse \",\" sv 0N 3#reverse string x}; .qp.go[600;400;] .qp.area[.area.salesRevenue;`dow;`revenue;] .qp.s.labels[`x`y!(`;`$\"Daily Sales Revenue\")] ,.qp.s.scale[`y;.gg.scale.format[fmt] .gg.scale.limits[0 0N] .gg.scale.linear] ,.qp.s.scale[`x;.gg.scale.categorical[{`Mon`Tue`Wed`Thu`Fri`Sat`Sun}]] Step 6: Customize Break Points \u00b6 The function .gg.scale.breaks customizes the tick values used for the scale. fmt:{\"$\",reverse \",\" sv 0N 3#reverse string x}; .qp.go[600;400;] .qp.area[.area.salesRevenue;`dow;`revenue;] .qp.s.labels[`x`y!(`;`$\"Daily Sales Revenue\")] ,.qp.s.scale[`y;.gg.scale.format[fmt] .gg.scale.limits[0 0N] .gg.scale.breaks[200*til 7] .gg.scale.linear] ,.qp.s.scale[`x;.gg.scale.categorical[{`Mon`Tue`Wed`Thu`Fri`Sat`Sun}]] Step Final: Change Area Color \u00b6 The function .qp.s.geom creates a chart setting which has a property fill to specify the area color. fmt:{\"$\",reverse \",\" sv 0N 3#reverse string x}; .qp.go[600;400;] .qp.area[.area.salesRevenue;`dow;`revenue;] .qp.s.geom[``fill!(::;`red)] ,.qp.s.labels[`x`y!(`;`$\"Daily Sales Revenue\")] ,.qp.s.scale[`y;.gg.scale.format[fmt] .gg.scale.limits[0 0N] .gg.scale.breaks[200*til 7] .gg.scale.linear] ,.qp.s.scale[`x;.gg.scale.categorical[{`Mon`Tue`Wed`Thu`Fri`Sat`Sun}]]","title":"Basic"},{"location":"examples/area/basic/#basic-area-chart","text":"In this example, we are going to create a basic area chart to show the daily sales revenue of a coffee shop over a week. The final chart looks like below:","title":"Basic Area Chart"},{"location":"examples/area/basic/#overview-of-data","text":"The table .area.salesRevenue has the following schema: c | t f a -------| ----- dow | s revenue| j The first 3 rows from the table are as shown below. dow revenue ----------- Mon 820 Tue 932 Wed 901 The first column dow is day of week and the second column revenue is daily sales revenue in dollars.","title":"Overview of Data"},{"location":"examples/area/basic/#step-1-first-attempt","text":"The function .qp.area creates an area chart. The following code snippet creates the area chart of sales revenue against the day of week without any customization. .qp.go[600;400;] .qp.area[.area.salesRevenue;`dow;`revenue;::] There are a few improvements on this area chart we can make: Customize the y -axis label and tick values Remove the x -axis label since it is not necessary Sort the data points from Monday to Sunday","title":"Step 1: First Attempt"},{"location":"examples/area/basic/#step-2-customize-axis-labels","text":"The last line with .qp.s.labels is added in the code snippet below to customize the axis labels. Note that a null symbol is used for the x -axis to suppress the label. .qp.go[600;400;] .qp.area[.area.salesRevenue;`dow;`revenue;] .qp.s.labels[`x`y!(`;`$\"Daily Sales Revenue\")]","title":"Step 2: Customize Axis Labels"},{"location":"examples/area/basic/#step-3-format-tick-values","text":"In this step, we add a function to format the displayed tick values on the y -axis, i.e. comma is used as the thousands separator and a dollar sign ($) is prepended. fmt:{\"$\",reverse \",\" sv 0N 3#reverse string x}; .qp.go[600;400;] .qp.area[.area.salesRevenue;`dow;`revenue;] .qp.s.labels[`x`y!(`;`$\"Daily Sales Revenue\")] ,.qp.s.scale[`y;.gg.scale.format[fmt] .gg.scale.linear]","title":"Step 3: Format Tick Values"},{"location":"examples/area/basic/#step-4-reorder-x-axis-values","text":"The function .gg.scale.categorical takes a function which returns the new order of the categorical values. fmt:{\"$\",reverse \",\" sv 0N 3#reverse string x}; .qp.go[600;400;] .qp.area[.area.salesRevenue;`dow;`revenue;] .qp.s.labels[`x`y!(`;`$\"Daily Sales Revenue\")] ,.qp.s.scale[`y;.gg.scale.format[fmt] .gg.scale.linear] ,.qp.s.scale[`x;.gg.scale.categorical[{`Mon`Tue`Wed`Thu`Fri`Sat`Sun}]] After adding the last line in code above, the data is displayed properly from Monday to Sunday.","title":"Step 4: Reorder x-Axis Values"},{"location":"examples/area/basic/#step-5-start-the-scale-at-zero","text":"The function .gg.scale.limits is used to control the limits (minimum and maximum) for a scale. If either limit provided is null, the minimum or maximum values will be used as in usual. fmt:{\"$\",reverse \",\" sv 0N 3#reverse string x}; .qp.go[600;400;] .qp.area[.area.salesRevenue;`dow;`revenue;] .qp.s.labels[`x`y!(`;`$\"Daily Sales Revenue\")] ,.qp.s.scale[`y;.gg.scale.format[fmt] .gg.scale.limits[0 0N] .gg.scale.linear] ,.qp.s.scale[`x;.gg.scale.categorical[{`Mon`Tue`Wed`Thu`Fri`Sat`Sun}]]","title":"Step 5: Start the Scale at Zero"},{"location":"examples/area/basic/#step-6-customize-break-points","text":"The function .gg.scale.breaks customizes the tick values used for the scale. fmt:{\"$\",reverse \",\" sv 0N 3#reverse string x}; .qp.go[600;400;] .qp.area[.area.salesRevenue;`dow;`revenue;] .qp.s.labels[`x`y!(`;`$\"Daily Sales Revenue\")] ,.qp.s.scale[`y;.gg.scale.format[fmt] .gg.scale.limits[0 0N] .gg.scale.breaks[200*til 7] .gg.scale.linear] ,.qp.s.scale[`x;.gg.scale.categorical[{`Mon`Tue`Wed`Thu`Fri`Sat`Sun}]]","title":"Step 6: Customize Break Points"},{"location":"examples/area/basic/#step-final-change-area-color","text":"The function .qp.s.geom creates a chart setting which has a property fill to specify the area color. fmt:{\"$\",reverse \",\" sv 0N 3#reverse string x}; .qp.go[600;400;] .qp.area[.area.salesRevenue;`dow;`revenue;] .qp.s.geom[``fill!(::;`red)] ,.qp.s.labels[`x`y!(`;`$\"Daily Sales Revenue\")] ,.qp.s.scale[`y;.gg.scale.format[fmt] .gg.scale.limits[0 0N] .gg.scale.breaks[200*til 7] .gg.scale.linear] ,.qp.s.scale[`x;.gg.scale.categorical[{`Mon`Tue`Wed`Thu`Fri`Sat`Sun}]]","title":"Step Final: Change Area Color"},{"location":"examples/bar/simple/","text":"Simple Bar Chart \u00b6","title":"Simple"},{"location":"examples/bar/simple/#simple-bar-chart","text":"","title":"Simple Bar Chart"},{"location":"examples/line/","text":"Line Chart \u00b6 Basic Line Chart Smoothed Line Chart Stacked Line Chart","title":"Overview"},{"location":"examples/line/#line-chart","text":"Basic Line Chart Smoothed Line Chart Stacked Line Chart","title":"Line Chart"},{"location":"examples/line/basic/","text":"Basic Line Chart \u00b6 In this example, we are going to create a basic line chart to show the quarterly market share of Investors Exchange in U.S. equities market since it was launched in 2016. The final chart looks like below: Overview of Data \u00b6 The table .line.iexMktShare has the following schema: c | t f a -------| ----- quarter| s mktshr | f The first 3 rows from the table are as shown below. quarter mktshr ------------------ 2016Q4 0.0174625 2017Q1 0.02009825 2017Q2 0.02162242 Step 1: First Attempt \u00b6 Let's get started with our first attempt to plot a line of market share against time using the default settings. // .line.basic.f01 .qp.go[600;400;] .qp.line[.line.iexMktShare;`quarter;`mktshr;::] A basic line chart is created as below. There are a few places we can do better to improve this basic line chart: Update the x and y axis label to make them more readable Format the y -axis tick as percentage, .i.e. replacing 0.022 with 2.2% The x -axis tick values are too crowded Show the data points as a small empty circle Let's see how we can achieve the above improvements. Step 2: Axis Labels \u00b6 By default, the column names are used as the axis labels. In this step, I will show how to customize the axis labels. We use .qp.s.labels to customize the appreance of labels. // .line.basic.f02 .qp.go[600;400;] .qp.line[.line.iexMktShare;`quarter;`mktshr;] .qp.s.labels[`x`y!(`Quarter;`$\"Market Share (%)\")] By adding the last line in the above code snippet, the labels on both x -axis and y -axis look much nicer. Step 3: Tick Values \u00b6 In this step, we make two changes: The tick values on the y -axis are rendered as percentage by adding a percent sign in string format Every other tick values are displayed on the x -axis to make it less crowded // .line.basic.f03 xfmt:{n:`long$last string x;$[0=n mod 2;x;`]}; yfmt:{`$string[0.1*floor 0.5+1000*x],\"%\"}; .qp.go[600;400;] .qp.line[.line.iexMktShare;`quarter;`mktshr;] .qp.s.labels[`x`y!(`Quarter;`$\"Market Share (%)\")] ,.qp.s.scale[`x;.gg.scale.format[xfmt;.gg.scale.categorical[]]] ,.qp.s.scale[`y;.gg.scale.format[yfmt;] .gg.scale.linear] The last two lines with .qp.s.scale customize the look of tick values on both x -axis and y -axis. Step 4: Data Points \u00b6 The geometry settings allow us to show the data points and customize the color of the line and points. xfmt:{n:`long$last string x;$[0=n mod 2;x;`]}; yfmt:{`$string[0.1*floor 0.5+1000*x],\"%\"}; .qp.go[600;400;] .qp.line[.line.iexMktShare;`quarter;`mktshr;] .qp.s.geom[`fill`decorations!(`blue;1b)] ,.qp.s.labels[`x`y!(`Quarter;`$\"Market Share (%)\")] ,.qp.s.scale[`x;.gg.scale.format[xfmt;.gg.scale.categorical[]]] ,.qp.s.scale[`y;.gg.scale.format[yfmt;] .gg.scale.linear] The geometry setting .qp.s.geom above enables displaying the points and sets the color of the line and points to blue. Step Final: Customize the Points \u00b6 To show points as empty circle, two changes are made: The fill color is white The outline color is red // .line.basic.ff xfmt:{n:`long$last string x;$[0=n mod 2;x;`]}; yfmt:{`$string[0.1*floor 0.5+1000*x],\"%\"}; .qp.go[600;400;] .qp.title[\"IEX Market Share Since Its Inception\"] .qp.stack ( .qp.line[.line.iexMktShare;`quarter;`mktshr;] .qp.s.geom[`fill`decorations!(`blue;0b)] ,.qp.s.labels[`x`y!(`Quarter;`$\"Market Share (%)\")] ,.qp.s.scale[`x;.gg.scale.format[xfmt;.gg.scale.categorical[]]] ,.qp.s.scale[`y;.gg.scale.format[yfmt;] .gg.scale.linear]; .qp.point[t;`quarter;`mktshr;] .qp.s.geom[`colour`fill`size`shape`strokewidth!(`red;`white;3;`circle;1)] ,.qp.s.labels[`x`y!(`Quarter;`$\"Market Share (%)\")] ) Here is the final line chart with data points. A title is also added into the chart.","title":"Basic"},{"location":"examples/line/basic/#basic-line-chart","text":"In this example, we are going to create a basic line chart to show the quarterly market share of Investors Exchange in U.S. equities market since it was launched in 2016. The final chart looks like below:","title":"Basic Line Chart"},{"location":"examples/line/basic/#overview-of-data","text":"The table .line.iexMktShare has the following schema: c | t f a -------| ----- quarter| s mktshr | f The first 3 rows from the table are as shown below. quarter mktshr ------------------ 2016Q4 0.0174625 2017Q1 0.02009825 2017Q2 0.02162242","title":"Overview of Data"},{"location":"examples/line/basic/#step-1-first-attempt","text":"Let's get started with our first attempt to plot a line of market share against time using the default settings. // .line.basic.f01 .qp.go[600;400;] .qp.line[.line.iexMktShare;`quarter;`mktshr;::] A basic line chart is created as below. There are a few places we can do better to improve this basic line chart: Update the x and y axis label to make them more readable Format the y -axis tick as percentage, .i.e. replacing 0.022 with 2.2% The x -axis tick values are too crowded Show the data points as a small empty circle Let's see how we can achieve the above improvements.","title":"Step 1: First Attempt"},{"location":"examples/line/basic/#step-2-axis-labels","text":"By default, the column names are used as the axis labels. In this step, I will show how to customize the axis labels. We use .qp.s.labels to customize the appreance of labels. // .line.basic.f02 .qp.go[600;400;] .qp.line[.line.iexMktShare;`quarter;`mktshr;] .qp.s.labels[`x`y!(`Quarter;`$\"Market Share (%)\")] By adding the last line in the above code snippet, the labels on both x -axis and y -axis look much nicer.","title":"Step 2: Axis Labels"},{"location":"examples/line/basic/#step-3-tick-values","text":"In this step, we make two changes: The tick values on the y -axis are rendered as percentage by adding a percent sign in string format Every other tick values are displayed on the x -axis to make it less crowded // .line.basic.f03 xfmt:{n:`long$last string x;$[0=n mod 2;x;`]}; yfmt:{`$string[0.1*floor 0.5+1000*x],\"%\"}; .qp.go[600;400;] .qp.line[.line.iexMktShare;`quarter;`mktshr;] .qp.s.labels[`x`y!(`Quarter;`$\"Market Share (%)\")] ,.qp.s.scale[`x;.gg.scale.format[xfmt;.gg.scale.categorical[]]] ,.qp.s.scale[`y;.gg.scale.format[yfmt;] .gg.scale.linear] The last two lines with .qp.s.scale customize the look of tick values on both x -axis and y -axis.","title":"Step 3: Tick Values"},{"location":"examples/line/basic/#step-4-data-points","text":"The geometry settings allow us to show the data points and customize the color of the line and points. xfmt:{n:`long$last string x;$[0=n mod 2;x;`]}; yfmt:{`$string[0.1*floor 0.5+1000*x],\"%\"}; .qp.go[600;400;] .qp.line[.line.iexMktShare;`quarter;`mktshr;] .qp.s.geom[`fill`decorations!(`blue;1b)] ,.qp.s.labels[`x`y!(`Quarter;`$\"Market Share (%)\")] ,.qp.s.scale[`x;.gg.scale.format[xfmt;.gg.scale.categorical[]]] ,.qp.s.scale[`y;.gg.scale.format[yfmt;] .gg.scale.linear] The geometry setting .qp.s.geom above enables displaying the points and sets the color of the line and points to blue.","title":"Step 4: Data Points"},{"location":"examples/line/basic/#step-final-customize-the-points","text":"To show points as empty circle, two changes are made: The fill color is white The outline color is red // .line.basic.ff xfmt:{n:`long$last string x;$[0=n mod 2;x;`]}; yfmt:{`$string[0.1*floor 0.5+1000*x],\"%\"}; .qp.go[600;400;] .qp.title[\"IEX Market Share Since Its Inception\"] .qp.stack ( .qp.line[.line.iexMktShare;`quarter;`mktshr;] .qp.s.geom[`fill`decorations!(`blue;0b)] ,.qp.s.labels[`x`y!(`Quarter;`$\"Market Share (%)\")] ,.qp.s.scale[`x;.gg.scale.format[xfmt;.gg.scale.categorical[]]] ,.qp.s.scale[`y;.gg.scale.format[yfmt;] .gg.scale.linear]; .qp.point[t;`quarter;`mktshr;] .qp.s.geom[`colour`fill`size`shape`strokewidth!(`red;`white;3;`circle;1)] ,.qp.s.labels[`x`y!(`Quarter;`$\"Market Share (%)\")] ) Here is the final line chart with data points. A title is also added into the chart.","title":"Step Final: Customize the Points"},{"location":"examples/line/smoothed/","text":"Smoothed Line Chart \u00b6 In this example, we are going to create a smoothed line chart to show the quarterly market share of Investors Exchange in U.S. equities market since it was launched in 2016. The final chart looks like below: Overview of Data \u00b6 The same dataset is used in this example. For a detailed description of the data, see Overview of Data in Basic Line Chart . Cubic Spline \u00b6 There is no built-in function to perform cubic spline interpolation in Kx Deverloper libraries. A version is implemented in .math.spline according to the wiki page for Spline interpolation . Final Chart \u00b6 // .line.smoothed.ff t1:select quarter,mktshr,x:i,y:mktshr from .line.iexMktShare; t2:.math.spline[t1;`quarter;`mktshr]; xfmt:{ i:floor x; m:exec quarter from .line.iexMktShare; $[0=i mod 2;m i;`] }; yfmt:{`$utils.toFixed[1;100*x],\"%\"}; .qp.go[600;400;] .qp.title[\"Smoothed Line Chart\"] .qp.stack ( .qp.point[t1;`x;`y;] .qp.s.geom[`size`colour`fill`strokewidth!(2;`red;`white;1)] ,.qp.s.labels[`x`y!(`Quarter;`$\"Market Share (%)\")] ,.qp.s.scale[`x;.gg.scale.format[xfmt;] .gg.scale.linear] ,.qp.s.scale[`y;.gg.scale.format[yfmt;] .gg.scale.linear]; .qp.line[t2;`x;`y;] .qp.s.geom[`fill`decorations!(`blue;0b)] ,.qp.s.labels[`x`y!(`Quarter;`$\"Market Share (%)\")] )","title":"Smoothed"},{"location":"examples/line/smoothed/#smoothed-line-chart","text":"In this example, we are going to create a smoothed line chart to show the quarterly market share of Investors Exchange in U.S. equities market since it was launched in 2016. The final chart looks like below:","title":"Smoothed Line Chart"},{"location":"examples/line/smoothed/#overview-of-data","text":"The same dataset is used in this example. For a detailed description of the data, see Overview of Data in Basic Line Chart .","title":"Overview of Data"},{"location":"examples/line/smoothed/#cubic-spline","text":"There is no built-in function to perform cubic spline interpolation in Kx Deverloper libraries. A version is implemented in .math.spline according to the wiki page for Spline interpolation .","title":"Cubic Spline"},{"location":"examples/line/smoothed/#final-chart","text":"// .line.smoothed.ff t1:select quarter,mktshr,x:i,y:mktshr from .line.iexMktShare; t2:.math.spline[t1;`quarter;`mktshr]; xfmt:{ i:floor x; m:exec quarter from .line.iexMktShare; $[0=i mod 2;m i;`] }; yfmt:{`$utils.toFixed[1;100*x],\"%\"}; .qp.go[600;400;] .qp.title[\"Smoothed Line Chart\"] .qp.stack ( .qp.point[t1;`x;`y;] .qp.s.geom[`size`colour`fill`strokewidth!(2;`red;`white;1)] ,.qp.s.labels[`x`y!(`Quarter;`$\"Market Share (%)\")] ,.qp.s.scale[`x;.gg.scale.format[xfmt;] .gg.scale.linear] ,.qp.s.scale[`y;.gg.scale.format[yfmt;] .gg.scale.linear]; .qp.line[t2;`x;`y;] .qp.s.geom[`fill`decorations!(`blue;0b)] ,.qp.s.labels[`x`y!(`Quarter;`$\"Market Share (%)\")] )","title":"Final Chart"},{"location":"examples/line/stacked/","text":"Stacked Line Chart \u00b6 In this example, we are going to create a stacked line chart to show the yearly market volume of the U.S. equities market between 2011 and 2019. The final chart looks like below: Overview of Data \u00b6 The table .line.mktVolume has the following schema: c | t f a --------| ----- year | j exchange| s shares | f The first 3 rows from the table are as shown below. year exchange shares -------------------------------- 2019 NYSE Chicago 7.923022e+009 2019 NYSE National 2.48449e+010 2019 TRF 6.601719e+011 Step 1: First Attempt \u00b6 In this step, we simply calculate the cumulative volume traded by each exchange in each year and create a stacked line chart. Notice we sort the data by year and exchange first before the cumulative volume is calculated. A line is plotted for each exchange against year. t:0!update sums shares by year from `year`exchange xasc select from .line.mktVolume; .qp.go[600;400;] .qp.line[t;`year;`shares;] .qp.s.aes[`group`fill; `exchange`exchange] Without any customization, the stacked line chart is shown as below: There are a couple of aspects we can improve upon this chart: Customize the axis labels Transform the y -axis values to display them properly Adjust the width and height of legend to make it less crowded Add markers to the data points Step 2: Labels and Values \u00b6 First we convert the numerical year into a string to avoid the decimal digits as shown on the x -axis from the previous step. The volume is multiplied by 1e-9 to convert to billion shares. With these two changes, we use .qp.s.labels to customize the labels on both axis. t:0!update sums shares by year from `year`exchange xasc select from .line.mktVolume; t:update string year,shares:shares*1e-9 from t; .qp.go[600;400;] .qp.line[t;`year;`shares;] .qp.s.aes[`group`fill; `exchange`exchange] ,.qp.s.labels[`x`y!(`Year;`$\"Market Volume (billion shares)\")] Step 3: Add Markers \u00b6 A simple vanilla marker can be added to indicate the actual data points. t:0!update sums shares by year from `year`exchange xasc select from .line.mktVolume; t:update string year,shares:shares*1e-9 from t; .qp.go[600;400;] .qp.line[t;`year;`shares;] .qp.s.aes[`group`fill; `exchange`exchange] ,.qp.s.labels[`x`y!(`Year;`$\"Market Volume (billion shares)\")] ,.qp.s.geom[`size`colour`decorations!(2;`red;1b)] Step Final: Legend \u00b6 qp.theme is used to customize the legend. Here in this example, we provide a customized width ( legend_width ) and height ( legend_height ) to make the legend less crowded and make the full text visible. t:0!update sums shares by year from `year`exchange xasc select from .line.mktVolume; t:update string year,shares:shares*1e-9 from t; .qp.go[600;400;] .qp.theme[`legend_header_background_fill`legend_padding_top`legend_height`legend_width!(`white;0;300;110)] .qp.title[\"U.S. Equities Market Volume between 2011 and 2019\"] .qp.line[t;`year;`shares;] .qp.s.aes[`group`fill; `exchange`exchange] ,.qp.s.geom[`size`colour`decorations!(2;`red;1b)] ,.qp.s.labels[`x`y!(`Year;`$\"Market Volume (billion shares)\")]","title":"Stacked"},{"location":"examples/line/stacked/#stacked-line-chart","text":"In this example, we are going to create a stacked line chart to show the yearly market volume of the U.S. equities market between 2011 and 2019. The final chart looks like below:","title":"Stacked Line Chart"},{"location":"examples/line/stacked/#overview-of-data","text":"The table .line.mktVolume has the following schema: c | t f a --------| ----- year | j exchange| s shares | f The first 3 rows from the table are as shown below. year exchange shares -------------------------------- 2019 NYSE Chicago 7.923022e+009 2019 NYSE National 2.48449e+010 2019 TRF 6.601719e+011","title":"Overview of Data"},{"location":"examples/line/stacked/#step-1-first-attempt","text":"In this step, we simply calculate the cumulative volume traded by each exchange in each year and create a stacked line chart. Notice we sort the data by year and exchange first before the cumulative volume is calculated. A line is plotted for each exchange against year. t:0!update sums shares by year from `year`exchange xasc select from .line.mktVolume; .qp.go[600;400;] .qp.line[t;`year;`shares;] .qp.s.aes[`group`fill; `exchange`exchange] Without any customization, the stacked line chart is shown as below: There are a couple of aspects we can improve upon this chart: Customize the axis labels Transform the y -axis values to display them properly Adjust the width and height of legend to make it less crowded Add markers to the data points","title":"Step 1: First Attempt"},{"location":"examples/line/stacked/#step-2-labels-and-values","text":"First we convert the numerical year into a string to avoid the decimal digits as shown on the x -axis from the previous step. The volume is multiplied by 1e-9 to convert to billion shares. With these two changes, we use .qp.s.labels to customize the labels on both axis. t:0!update sums shares by year from `year`exchange xasc select from .line.mktVolume; t:update string year,shares:shares*1e-9 from t; .qp.go[600;400;] .qp.line[t;`year;`shares;] .qp.s.aes[`group`fill; `exchange`exchange] ,.qp.s.labels[`x`y!(`Year;`$\"Market Volume (billion shares)\")]","title":"Step 2: Labels and Values"},{"location":"examples/line/stacked/#step-3-add-markers","text":"A simple vanilla marker can be added to indicate the actual data points. t:0!update sums shares by year from `year`exchange xasc select from .line.mktVolume; t:update string year,shares:shares*1e-9 from t; .qp.go[600;400;] .qp.line[t;`year;`shares;] .qp.s.aes[`group`fill; `exchange`exchange] ,.qp.s.labels[`x`y!(`Year;`$\"Market Volume (billion shares)\")] ,.qp.s.geom[`size`colour`decorations!(2;`red;1b)]","title":"Step 3: Add Markers"},{"location":"examples/line/stacked/#step-final-legend","text":"qp.theme is used to customize the legend. Here in this example, we provide a customized width ( legend_width ) and height ( legend_height ) to make the legend less crowded and make the full text visible. t:0!update sums shares by year from `year`exchange xasc select from .line.mktVolume; t:update string year,shares:shares*1e-9 from t; .qp.go[600;400;] .qp.theme[`legend_header_background_fill`legend_padding_top`legend_height`legend_width!(`white;0;300;110)] .qp.title[\"U.S. Equities Market Volume between 2011 and 2019\"] .qp.line[t;`year;`shares;] .qp.s.aes[`group`fill; `exchange`exchange] ,.qp.s.geom[`size`colour`decorations!(2;`red;1b)] ,.qp.s.labels[`x`y!(`Year;`$\"Market Volume (billion shares)\")]","title":"Step Final: Legend"}]}